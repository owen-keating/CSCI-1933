Method                             ArrayList Runtime        LinkedList Runtime        Explanation
boolean add(T element)                  O(1)                        O(n)              The time complexity for ArrayLists is 1 because the number of operations in the function is constant, and looping through the array is not required. The time complexity for LinkedLists is n because the function has to loop through all nodes in the list in the worst case scenario.
boolean rotate(int n)                   O(n)                        O(n)              The time complexity for ArrayLists is n because the function requires looping through the array to rotate elements, which could reach the size of the array if a full rotation is requested. The time complexity for LinkedLists is n because the function has to loop through all nodes in the list in the worst case scenario.
void reverse()                          O(n)                        O(n)              The time complexity is O(n) in both scenarios because the functions require looping through the array or through all nodes in the list when faced with the worst case scenario.
void merge(List<T> otherList)           O(n)                        O(n)              The time complexity for ArrayLists is n because the function requires looping through all elements in the first array, followed by all the elements in the second array. I would think of this as O(2n), but I reduced the complexity by getting rid of the coefficient. I made a guess that the time complexity for LinkedLists was also O(n), however I cannot be sure about that answer because I was unable to get the function to work properly in the LinkedLists portion of the assignment.